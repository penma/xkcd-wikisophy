#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use LWP::UserAgent;
use Text::Balanced qw(extract_bracketed);
use URI;

binmode(STDOUT, ':utf8');

my ($is_debug, $cache_file);
my $lang = "en";
my $target = "Philosophy";

# This is needed in order to properly interpret UTF-8 arguments and options.
utf8::decode($_) for @ARGV;

GetOptions(
	"debug" => \$is_debug,
	"cache=s" => \$cache_file,
	"target=s" => \$target,
	"language=s" => \$lang,
);

$target = ucfirst($target);

my $ua = LWP::UserAgent->new;
$ua->timeout(10);
$ua->env_proxy;

my %cached;

if (defined $cache_file and open my $cache, '<:encoding(UTF-8)', $cache_file) {
	while (<$cache>) {
		chomp;
		if (m/^([^#]+)#(.*)$/) {
			$cached{$1} = $2;
		}
	}
}

for (@ARGV) {
	process_page($_, \%cached);
}

if (defined $cache_file) {
	open my $cache, '>:utf8', $cache_file or die "Unable to open $cache_file: $!";

	for (keys %cached) {
		print $cache "$_#$cached{$_}\n";
	}
}

sub parse_page {
	my ($c) = @_;
	my $page_name;

	$c =~ s/<ref[^>]*>[^<]+<\/ref>//gs;
	$c =~ s/'{2,}[^\n]+?'{2,}//gs;
	$c =~ s/<!--.*?-->//gs;

	wikiparse: while (length($c)) {
		if ($is_debug) {
			print $c;
			print "*" x 80 . "\n\n";
		}

		if ($c =~ /^[^{(]+\[\[/s) {
			$c =~ s/^[^\[]+//s;
			($page_name, $c) = extract_bracketed($c, "[");

			$page_name =~ s/^\[\[//;
			$page_name =~ s/\]\]$//;
			$page_name =~ s/\|.*//;
			$page_name =~ s/#.*$//;

			if ($page_name =~ /:/) {
				next wikiparse;
			}

			last wikiparse;
		} else {
			$c =~ s/^[^{(]+//s;
			(undef, $c) = extract_bracketed($c, substr($c, 0, 1));
		}
	}

	return $page_name;
}

sub process_page {
	my ($pagename, $cache) = @_;
	my $original_pagename = $pagename;

	my %encountered;
	my $num_encountered = 0;

	while (ucfirst($pagename) ne $target && !$encountered{ucfirst($pagename)}) {
		$encountered{ucfirst($pagename)} = $num_encountered++;

		if ($cache->{ucfirst($pagename)}) {
			print "-* $pagename\n";
			$pagename = $cache->{ucfirst($pagename)};
			next;
		}

		print "-> $pagename\n";

		my $uri = URI->new("https://secure.wikimedia.org/wikipedia/$lang/w/index.php");
		$uri->query_form(action => "raw", title => $pagename);
		my $response = $ua->get($uri->as_string);

		if (! $response->is_success) {
			die $response->status_line;
		}

		my $new_pagename = parse_page($response->decoded_content);

		$cache->{ucfirst($pagename)} = $new_pagename;
		$pagename = $new_pagename;
	}

	print "-> $pagename\n";

	if ($encountered{ucfirst($pagename)}) {
		print "$original_pagename: quo errat demonstrator ($num_encountered)\n";
	} else {
		print "$original_pagename: q.e.d. ($num_encountered)\n";
	}
}
