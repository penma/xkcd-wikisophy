#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use LWP::UserAgent;
use Text::Balanced qw(extract_bracketed);

my ($is_debug, $cache_file);
my $target = "philosophy";

GetOptions(
	"debug" => \$is_debug,
	"cache=s" => \$cache_file,
	"target=s" => \$target,
);

my $pagename = shift(@ARGV);

my $ua = LWP::UserAgent->new;
$ua->timeout(10);
$ua->env_proxy;

my $num_encountered = 0;
my (%encountered, %cached);

sub was_encountered {
	return $encountered{lc($pagename)};
}

sub parse_page {
	my ($c) = @_;
	my $page_name;

	wikiparse: while (length($c)) {
		if ($is_debug) {
			print $c;
			print "*" x 80 . "\n\n";
		}

		$c =~ s/<ref>.*?<\/ref>//gs;
		$c =~ s/'''?[^\n]'''?//s;

		if ($c =~ /^[^{(]+\[\[/s) {
			$c =~ s/^[^\[]+//s;
			($page_name, $c) = extract_bracketed($c);

			$page_name =~ s/^\[\[//;
			$page_name =~ s/\]\]$//;
			$page_name =~ s/\|.*//;
			$page_name =~ s/#.*$//;

			if ($page_name =~ /:/) {
				next wikiparse;
			}

			last wikiparse;
		} else {
			$c =~ s/^[^{(]+//s;
			(undef, $c) = extract_bracketed($c);
		}
	}

	return $page_name;
}


if ($cache_file and open my $cache, '<', $cache_file) {
	while (<$cache>) {
		chomp;
		if (m/^([^#]+)#(.*)$/) {
			$cached{$1} = $2;
		}
	}
}

while (lc($pagename) ne $target && (!was_encountered())) {
	$encountered{lc($pagename)} = $num_encountered++;

	if ($cached{lc($pagename)})
	{
		print "-* $pagename\n";
		$pagename = $cached{lc($pagename)};
		next;
	}

	print "-> $pagename\n";

	my $response = $ua->get("https://secure.wikimedia.org/wikipedia/en/wiki/$pagename?action=raw");

	if (! $response->is_success) {
		die $response->status_line;
	}

	my $new_pagename = parse_page($response->decoded_content);

	$cached{lc $pagename} = $new_pagename;
	$pagename = $new_pagename;
}

print "-> $pagename\n";

if (was_encountered()) {
	print "Other infinite loop!!\n";
}
else {
	print "QED\n";
}

if ($cache_file) {
	open my $cache, '>', $cache_file or die "Unable to open $cache_file: $!";

	for (keys %cached) {
		print $cache "$_#$cached{$_}\n";
	}
}
